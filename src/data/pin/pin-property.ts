import { Application } from "../../application";
import { Constants } from "../../constants";
import { insertSpacesBetweenCapitalizedWords } from "../../utils/text-utils";
import { CustomProperty } from "../custom-property";
import { PinCategory } from "./pin-category";
import { PinDirection } from "./pin-direction";
import { PinLink } from "./pin-link";

export class PinProperty extends CustomProperty {

    id: string;
    name: string;
    friendlyName: string;
    category: PinCategory;

    direction: PinDirection;
    toolTip: string;

    subCategory: string;
    subCategoryObject: string;
    subCategoryMemberReference: string;

    containerType: string;

    isReference: boolean;
    isConst: boolean;
    isWeakPointer: boolean;
    isUObjectWrapper: boolean;

    linkedTo: PinLink[];
    persistentGUID: string;
    hidden: boolean;
    notConnectable: boolean;

    defaultValue: string;
    autogeneratedDefaultValue: string;
    defaultValueIsReadOnly: boolean;

    // Used for knots
    defaultValueIsIgnored: boolean;

    advancedView: boolean;
    orphanedPin: boolean;

    hideName: boolean;

    get isLinked(): boolean {
        return (this.linkedTo && this.linkedTo.length > 0);
    }

    public get formattedName(): string {
        return insertSpacesBetweenCapitalizedWords(this.getFriendlyName());
    }

    public get shouldDrawDefaultValueBox(): boolean {
        return (!this.isLinked && this.direction !== PinDirection.EGPD_Output && !!this.defaultValue);
    }

    private getFriendlyName(): string {
        if (this.hideName) { return ''; }
        if (this.friendlyName) {
            return this.friendlyName;
        }

        return this.name;
    }
}
